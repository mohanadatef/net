@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Builder
@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@inject IViewLocalizer Localizer
@inject IOptions<RequestLocalizationOptions> LocOptions

@{
    var requestCulture = Context.Features.Get<IRequestCultureFeature>();
    var cultureItems = LocOptions.Value.SupportedUICultures
        .Select(c => new SelectListItem { Value = c.Name, Text = c.NativeName })
        .ToList();
}

<div class="dropdown-menu" aria-labelledby="dropdownMenu2">
    <a class="dropdown-item" onclick="change_langauge('@cultureItems.Where(x=>x.Value =="ar").Select(x=>x.Value).FirstOrDefault()')">@cultureItems.Where(x => x.Value == "ar").Select(x => x.Text).FirstOrDefault()</a>
    <a class="dropdown-item" onclick="change_langauge('@cultureItems.Where(x=>x.Value =="en").Select(x=>x.Value).FirstOrDefault()')">@cultureItems.Where(x => x.Value == "en").Select(x => x.Text).FirstOrDefault()</a>
    @*<a class="dropdown-item" onclick="change_langauge('@cultureItems.Where(x=>x.Value =="ur").Select(x=>x.Value).FirstOrDefault()')">@cultureItems.Where(x => x.Value == "ur").Select(x => x.Text).FirstOrDefault()</a>*@
</div>



<script>
    function change_langauge(lang) {
        $.post("@Url.Action("SetLanguage", "Home")", { culture: lang }, function (data) {
            window.location.reload();
        });
    }
</script>
